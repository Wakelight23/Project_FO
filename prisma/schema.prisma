generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  accountId Int      @id @default(autoincrement()) @map("accountId")
  email     String   @unique @map("email")
  password  String   @map("password")
  isAdmin   Boolean  @default(false) @map("isAdmin")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  manager   Manager?

  @@map("Account")
}

model Manager {
  managerId   Int          @id @default(autoincrement()) @map("managerId")
  email       String       @unique @map("email")
  accountId   Int          @unique @map("accountId")
  nickname    String       @map("nickname")
  cash        Int          @map("cash")
  recordId    Int          @map("recordId")
  rating      Int          @map("rating")
  createdAt   DateTime     @default(now()) @map("createdAt")
  updatedAt   DateTime     @updatedAt @map("updatedAt")
  account     Account      @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
  records     Record[]
  teamMembers TeamMember[]

  @@map("Manager")
}

model Player {
  playerId      Int          @id @default(autoincrement()) @map("playerId")
  name          String       @map("name")
  club          String       @map("club")
  speed         Int          @map("speed")
  goalFinishing Int          @map("goalFinishing")
  shootPower    Int          @map("shootPower")
  defense       Int          @map("defense")
  stamina       Int          @map("stamina")
  rarity        Int          @map("rarity")
  type          Int?         @map("type")
  playerImage   String?      @map("playerImage")
  createdAt     DateTime     @default(now()) @map("createdAt")
  updatedAt     DateTime     @updatedAt @map("updatedAt")
  teamMembers   TeamMember[]

  @@map("Player")
}

model TeamMember {
  teamMemberId Int      @id @default(autoincrement()) @map("teamMemberId")
  playerId     Int      @map("playerId")
  managerId    Int      @map("managerId")
  upgrade      Int      @default(0) @map("upgrade")
  isSelected   Boolean  @default(false) @map("isSelected")
  createdAt    DateTime @default(now()) @map("createdAt")
  updatedAt    DateTime @updatedAt @map("updatedAt")
  manager      Manager  @relation(fields: [managerId], references: [managerId], onDelete: Cascade)
  player       Player   @relation(fields: [playerId], references: [playerId], onDelete: Cascade)

  @@index([managerId], map: "TeamMember_managerId_fkey")
  @@index([playerId], map: "TeamMember_playerId_fkey")
  @@map("TeamMember")
}

model Record {
  recordId   Int      @id @default(autoincrement()) @map("recordId")
  managerId  Int      @map("managerId")
  gameResult Int      @map("gameResult")
  createdAt  DateTime @default(now()) @map("createdAt")
  updatedAt  DateTime @updatedAt @map("updatedAt")
  manager    Manager  @relation(fields: [managerId], references: [managerId], onDelete: Cascade)

  @@index([managerId], map: "Record_managerId_fkey")
  @@map("Record")
}

model playertest {
  playerId   Int      @id @default(autoincrement())
  playerName String
  playerStat Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model teamtest {
  teamMemberId Int      @id @default(autoincrement())
  playerId     Int
  managerId    Int
  upgrade      Int      @default(0)
  isSelected   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}
