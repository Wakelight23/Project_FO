// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// #적용
// npx prisma migrate dev

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  accountId Int     @id @default(autoincrement()) @map("accountId")
  email     String  @unique @map("email")
  password  String  @map("password")
  isAdmin   Boolean @default(false) @map("isAdmin")

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  manager Manager?
  coupon  Coupon?

  @@map("Account")
}

model Manager {
  managerId Int    @id @default(autoincrement()) @map("managerId")
  email     String @unique @map("email")
  accountId Int    @unique @map("accountId")
  nickname  String @unique @map("nickname")
  cash      Int    @default(100) @map("cash")
  recordId  Int?   @map("recordId")
  rating    Int?   @map("rating")

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  account     Account      @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
  records     Record[]
  teamMembers TeamMember[]

  @@map("Manager")
}

model Player {
  playerId      Int     @id @default(autoincrement()) @map("playerId")
  name          String  @map("name")
  club          String  @map("club")
  speed         Int     @map("speed")
  goalFinishing Int     @map("goalFinishing")
  shootPower    Int     @map("shootPower")
  defense       Int     @map("defense")
  stamina       Int     @map("stamina")
  rarity        Int     @map("rarity")
  type          Int?    @map("type")
  playerImage   String? @map("playerImage")

  teamMembers TeamMember[]

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  @@map("Player")
}

model TeamMember {
  teamMemberId Int     @id @default(autoincrement()) @map("teamMemberId")
  playerId     Int     @map("playerId")
  managerId    Int     @map("managerId")
  upgrade      Int     @default(0) @map("upgrade")
  isSelected   Boolean @default(false) @map("isSelected")

  player  Player  @relation(fields: [playerId], references: [playerId], onDelete: Cascade)
  manager Manager @relation(fields: [managerId], references: [managerId], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  @@map("TeamMember")
}

model Record {
  recordId   Int @id @default(autoincrement()) @map("recordId")
  managerId  Int @map("managerId")
  gameResult Int @map("gameResult")

  manager Manager @relation(fields: [managerId], references: [managerId], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  @@map("Record")
}

model playertest {
  playerId   Int      @id @default(autoincrement())
  playerName String
  playerStat Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model teamtest {
  teamMemberId Int      @id @default(autoincrement())
  playerId     Int
  upgrade      Int      @default(0)
  isSelected   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model Coupon {
  id          Int     @id @default(autoincrement()) @map("couponId") // 필드를 "coupon_id"로 매핑
  accountId   Int     @unique @map("accountId")
  code        String  @unique @map("couponCode") // 필드를 "coupon_code"로 매핑
  couponType  String  @map("couponType")
  couponValue Int     @map("couponValue") // 랜덤쿠폰은 값이 최댓값
  isUsed      Boolean @default(false) @map("isUsed") // 필드를 "is_used"로 매핑

  createdAt DateTime @default(now()) @map("created_at") // 필드를 "created_at"로 매핑
  updatedAt DateTime @updatedAt @map("updated_at") // 필드를 "updated_at"로 매핑

  // account 이메일이랑 비번 사용
  account Account? @relation(fields: [accountId], references: [accountId], onDelete: Cascade)

  @@map("Coupons") // 테이블 이름을 "coupons"로 매핑
}
